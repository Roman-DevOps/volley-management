@model VolleyManagement.UI.Areas.Mvc.ViewModels.Teams.TournamentTeamsListViewModel
@using VolleyManagement.UI.App_GlobalResources

@{
    ViewBag.Title = "ManageTournamentTeams";
    Layout = "~/Areas/Mvc/Views/Shared/_MenuLayout.cshtml";
}

<h2>@TournamentViews.ManageTeams</h2>

@foreach (var item in Model.List)
{
    <p>
        @Html.ActionLink(item.Name, "Details", "Teams", new { id = item.Id }, null)
    </p>
}

<div>
    @Html.HiddenFor(model => model.TournamentId)
    <button id='addTeamToTournamentButton'>Add team to tournament</button>
    <table id="tornamentRoster" class="table">
        <tr>
            <th>@Html.DisplayNameFor(model => model.List.FirstOrDefault().Name)</th>
            <th class="hidden"></th>
        </tr>
    </table>
    <button id='addTeamsButton'>Add teams</button>

    <script type="text/javascript">
        var currNs = {};
        var privates = {};
        privates.tornamentTeamsTable = $("#tornamentRoster");

        privates.getAllTeamsOptions = function (callback) {
            $.getJSON("/Teams/GetAllTeams", callback);
        }

        privates.handleTeamsAddSuccess = function (data, status, xhr) {
            alert(data);
            location.reload();
        };

        privates.handleTeamsAddFail = function (data, status, xhr) {
            alert("Team adding failed");
        };

        privates.getJsonForTournamentTeamsSave = function () {
            var result = {
                TournamentId: $("[name='TournamentId']").val(),
                List: []
            }
            var selectedTeams = $("select :selected");

            for (var i = 0; i < selectedTeams.length; i++) {
                result.List.push({
                    Id: selectedTeams[i].value,
                    Name: selectedTeams[i].text
                });
            }

            return result;
        }

        privates.getTornamentTeamsRowMarkup = function (responceOptions) {
            var result = "<tr class='" + "'>" +
            "<td><select>" + responceOptions + "</select></td>" +
            "<td>" + "<button class='deleteTeamButton'>Delete</button>" + "</td></tr>";            
            return result;
        }

        privates.renderNewTournamentTeamsRow = function (responceOptions) {
            $('tr:last', privates.tornamentTeamsTable).after(privates.getTornamentTeamsRowMarkup(responceOptions));
        }

        privates.addTournamentTeamsRow = function () {
            var context = $('tr:last', privates.tornamentTeamsTable);
            var elem = $('select :selected', context);
            if (elem.val() !== "0") {
                privates.getAllTeamsOptions(function (options) {
                    var responceOptions = "<option value = '0'> No team selected</option>";
                    $.each(options, function (key, value) {
                        responceOptions += '<option value="' + value.Id + '">' + value.Name + '</option>';
                    })
                    privates.renderNewTournamentTeamsRow(responceOptions);
                    $(".deleteTeamButton").bind('click', currNs.onDeleteTeamButtonClick);
                });
            }
            return false;
        }

        currNs.onAddTeamToTournamentButtonClick = function () {
            privates.addTournamentTeamsRow();
        }

        currNs.onAddTeamsButtonButtonClick = function () {
            var data = privates.getJsonForTournamentTeamsSave();
            $.post("/Tournaments/AddTeamsToTournament", data)
                .done(privates.handleTeamsAddSuccess)
                .fail(privates.handleTeamsAddFail);
        }

        currNs.onDeleteTeamButtonClick = function (eventData) {
            var currentRow = eventData.target.parentElement.parentElement;
            currentRow.remove();
        }

        $("#addTeamToTournamentButton").bind('click', currNs.onAddTeamToTournamentButtonClick);
        $("#addTeamsButton").bind('click', currNs.onAddTeamsButtonButtonClick);

    </script>
</div>
