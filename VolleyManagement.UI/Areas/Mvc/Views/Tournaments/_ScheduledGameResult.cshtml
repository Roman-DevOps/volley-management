@model VolleyManagement.UI.Areas.Mvc.ViewModels.GameResults.GameResultViewModel
@using VolleyManagement.Domain.RolesAggregate;

<div class="table-bordered" id=@Model.Id>

    @Html.HiddenFor(model => Model.Round, new { @id = "numberOfRound_" + @Model.Id })

    @if (!Model.AwayTeamId.HasValue)
    {
    <div class="row">
        <div class="col-md-10">
            <strong>  @Model.HomeTeamName </strong>
        </div>
    </div>
    <div class="row">
        <div class="col-md-10 text-right">
            @Resources.UI.TournamentViews.TeamDayOff
        </div>
    </div>
    }
    else
    {
        if (Model.IsTechnicalDefeat)
        {
        <div class="row">
            <div class="col-md-10">
                <strong>  @Model.HomeTeamName </strong>
            </div>
            <div class="col-md-2">
                <strong>  @Model.SetsScore.Home </strong>
            </div>
        </div>

        <div class="row">
            <div class="col-md-10">
                <strong>  @Model.AwayTeamName </strong>
            </div>
            <div class="col-md-2">
                <strong>  @Model.SetsScore.Away </strong>
            </div>
        </div>

        <div class="row">
            <div class="col-md-10 text-right">
                @Resources.UI.GameResultViews.TechnicalDefeat
            </div>
        </div>
        }
        else if (!Model.SetsScore.IsEmpty)
        {
        <div class="row">
            <div class="col-md-10">
                <strong>  @Model.HomeTeamName </strong>
            </div>
            <div class="col-md-2">
                <strong>   @Model.SetsScore.Home </strong>
            </div>
        </div>

        <div class="row">
            <div class="col-md-10">
                <strong>  @Model.AwayTeamName </strong>
            </div>
            <div class="col-md-2">
                <strong>  @Model.SetsScore.Away </strong>
            </div>
        </div>

        <div class="row">
            @foreach (var score in Model.SetScores)
            {
                if (!score.IsEmpty)
                {
                <div class="col-md-2">
                    @score.GetFormattedScore
                    </div>
                }
            }
        </div>
        }
        else
        {
        <div class="row">
            <div class="col-md-10">
                <strong>  @Model.HomeTeamName </strong>
            </div>
        </div>

        <div class="row">
            <div class="col-md-10">
                <strong>  @Model.AwayTeamName </strong>
            </div>
        </div>

        <div class="row">
            <div class="col-md-10 text-right">
                @Model.ShortGameDate
            </div>
        </div>
        }
    }


    <div class="row">
        @if (Model.AllowedOperations.IsAllowed(AuthOperations.Games.EditResult) && Model.AwayTeamId.HasValue)
        {
        <div class="col-md-2">
            @Html.ActionLink(Resources.UI.TournamentViews.Result, "Edit", "GameResults", new { Id = Model.Id }, null)
        </div>
        }
        @if (Model.AllowedOperations.IsAllowed(AuthOperations.Games.Edit) &&
                                            Model.AllowedOperations.IsAllowed(AuthOperations.Games.Delete))
        {

            if (Model.IsScheduleEditable)
            {
            <div class="col-md-2">
                @Html.ActionLink(Resources.UI.TournamentViews.Edit, "EditScheduledGame", new { gameId = Model.Id })
            </div>

            <div class="col-md-2">
                @Html.ActionLink(Resources.UI.GameResultViews.Delete, "Delete", "GameResults", new { id = Model.Id },
                                 new { @class = "deleteGame", @id = Model.Id })
            </div>
            }
        }
    </div>

</div>
