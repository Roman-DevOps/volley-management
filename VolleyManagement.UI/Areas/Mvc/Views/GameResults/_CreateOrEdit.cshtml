@model VolleyManagement.UI.Areas.Mvc.ViewModels.GameResults.GameResultViewModel

@using GameResultConstants = VolleyManagement.Domain.Constants.GameResult;
@using Resources = VolleyManagement.Domain.Properties.Resources;

@Html.ValidationMessage("ValidationMessage", new { @class = "text-danger", name = "ValidationMessage" })
@Html.HiddenFor(model => model.TournamentId)

<div class="form-group">
    Teams:
    @Html.DropDownListFor(
            x => x.HomeTeamId,
            new SelectList(ViewBag.Teams, "Value", "Text"))

    @Html.DropDownListFor(
            x => x.AwayTeamId,
            new SelectList(ViewBag.Teams, "Value", "Text"))
</div>

<div class="form-group">
    Sets score:
    @Html.EditorFor(model => model.SetsScore.Home, new { htmlAttributes = new { @class = "form-control" } })

    @Html.EditorFor(model => model.SetsScore.Away, new { htmlAttributes = new { @class = "form-control" } })
</div>

<div class="form-group">
    <label for="@Model.IsTechnicalDefeat">
        Technical defeat:
        @Html.EditorFor(model => model.IsTechnicalDefeat)
        @Html.ValidationMessageFor(model => model.IsTechnicalDefeat, "", new { @class = "text-danger" })
    </label>
</div>

    @for (int i = 0; i < Model.SetScores.Count; i++)
    {
<div class="form-group">
    Set #@(i + 1):
    @Html.EditorFor(model => model.SetScores[i].Home, new { htmlAttributes = new { @class = "form-control" } })

    @Html.EditorFor(model => model.SetScores[i].Away, new { htmlAttributes = new { @class = "form-control" } })
</div>
    }


<script>

    var gameResultConstants = {
        "MIN_SETS_COUNT" : @GameResultConstants.MIN_SETS_COUNT,
        "MAX_SETS_COUNT" : @GameResultConstants.MAX_SETS_COUNT,
        "SET_POINTS_MIN_DELTA_TO_WIN": @GameResultConstants.SET_POINTS_MIN_DELTA_TO_WIN,
        "SET_POINTS_MIN_VALUE_TO_WIN": @GameResultConstants.SET_POINTS_MIN_VALUE_TO_WIN,
        "TECHNICAL_DEFEAT_SETS_WINNER_SCORE": @GameResultConstants.TECHNICAL_DEFEAT_SETS_WINNER_SCORE,
        "TECHNICAL_DEFEAT_SETS_LOSER_SCORE": @GameResultConstants.TECHNICAL_DEFEAT_SETS_LOSER_SCORE,
        "TECHNICAL_DEFEAT_SET_WINNER_SCORE": @GameResultConstants.TECHNICAL_DEFEAT_SET_WINNER_SCORE,
        "TECHNICAL_DEFEAT_SET_LOSER_SCORE": @GameResultConstants.TECHNICAL_DEFEAT_SET_LOSER_SCORE,
        "UNPLAYED_SET_HOME_SCORE": @GameResultConstants.UNPLAYED_SET_HOME_SCORE,
        "UNPLAYED_SET_AWAY_SCORE": @GameResultConstants.UNPLAYED_SET_AWAY_SCORE
    };

    var resourceMessages = {
        "GameResultSameTeam" : "@Resources.GameResultSameTeam",
        "GameResultSetsScoreNoMatchSetScores" : "@Resources.GameResultSetsScoreNoMatchSetScores",
        "GameResultSetsScoreInvalid" : "@Resources.GameResultSetsScoreInvalid",
        "GameResultRequiredSetScores" : "@Resources.GameResultRequiredSetScores",
        "GameResultOptionalSetScores" : "@Resources.GameResultOptionalSetScores"
    };

</script>