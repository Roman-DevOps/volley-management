@model VolleyManagement.UI.Areas.Mvc.ViewModels.GameResults.GameResultViewModel

@{
    ViewBag.Title = "Create game result";
}

<h2>Create</h2>

@using (Html.BeginForm())
{
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.ValidationMessage("ValidationError", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.TournamentId)

    <div class="form-group">
        Teams:
        @Html.DropDownListFor(
            x => x.HomeTeamId,
            new SelectList(ViewBag.Teams, "Value", "Text"))

        @Html.DropDownListFor(
            x => x.AwayTeamId,
            new SelectList(ViewBag.Teams, "Value", "Text"))
    </div>

    <div class="form-group">
        Sets score:
        @Html.EditorFor(model => model.SetsScore.Home, new { htmlAttributes = new { @class = "form-control" } })

        @Html.EditorFor(model => model.SetsScore.Away, new { htmlAttributes = new { @class = "form-control" } })
    </div>

    <div class="form-group">
        <label for="@Model.IsTechnicalDefeat">
            Technical defeat:
            @Html.EditorFor(model => model.IsTechnicalDefeat)
            @Html.ValidationMessageFor(model => model.IsTechnicalDefeat, "", new { @class = "text-danger" })
        </label>
    </div>

    for (int i = 0; i < Model.SetScores.Count; i++)
    {
        <div class="form-group">
            Set #@(i + 1):
            @Html.EditorFor(model => model.SetScores[i].Home, new { htmlAttributes = new { @class = "form-control" } })

            @Html.EditorFor(model => model.SetScores[i].Away, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    }

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
}
